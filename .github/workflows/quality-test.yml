name: 🧪 Quality test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_ENV: test
  V0_API_KEY: ${{ secrets.V0_API_KEY }}
  DEBUG: true
  CI: true

jobs:
  quality-check:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      # ─────────────────────────────────────────────
      - name: 📦 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # For better git history access

      # ─────────────────────────────────────────────
      - name: ⚡ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest # Ensure we get v1.2.15+ for bun audit support

      # ─────────────────────────────────────────────
      - name: 📥 Install dependencies
        run: |
          echo "🚀 Installing dependencies with Bun (up to 25x faster than npm)"
          echo "Bun version: $(bun --version)"

          if [ -f bun.lock ] || [ -f bun.lockb ]; then
            echo "🟢 Using bun install with lockfile for reproducible builds"
            bun install --frozen-lockfile
          elif [ -f package-lock.json ]; then
            echo "🟡 npm lockfile detected - installing with Bun"
            bun install
            echo "::notice::Consider switching to bun.lock for faster installs"
          elif [ -f yarn.lock ]; then
            echo "🟡 Yarn lockfile detected - installing with Bun"
            bun install
            echo "::notice::Consider switching to bun.lock for faster installs"
          else
            echo "🔴 No lockfile found - this may cause inconsistent installs"
            bun install
            echo "::warning::Consider committing bun.lock for reproducible builds"
          fi

      # ─────────────────────────────────────────────
      - name: 🔍 Type check
        run: bun run type-check
        continue-on-error: false

      - name: 🛡️ Security audit
        run: |
          echo "Running security audit with Bun..."
          echo "Bun version: $(bun --version)"

          # bun audit is available in v1.2.15+
          if bun audit; then
            echo "✅ No security vulnerabilities found"
          else
            echo "⚠️ Security vulnerabilities detected by bun audit"
            echo "::warning::Security vulnerabilities found. Review the audit output above"
            # Don't fail the build on vulnerabilities, just warn
            exit 0
          fi

      # ─────────────────────────────────────────────
      - name: 🧪 Run tests with coverage
        run: |
          echo "Running tests with coverage using Bun..."
          bun run test:coverage
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false
          verbose: true
        if: success() || failure() # Upload even if tests fail

      # ─────────────────────────────────────────────
      - name: 🏗️ Build project
        run: |
          echo "Building project with Bun..."
          bun run build
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'

      - name: ✅ Verify build artifacts
        run: |
          echo "Verifying build output..."

          # Check if dist directory exists
          if [ ! -d "dist" ]; then
            echo "❌ Build failed: dist/ directory not found"
            exit 1
          fi

          # Check for main build artifacts (adjust paths as needed)
          if [ ! -f "dist/index.js" ] && [ ! -f "dist/main.js" ] && [ ! -f "dist/app.js" ]; then
            echo "❌ Build failed: No main JS file found in dist/"
            echo "Contents of dist/:"
            ls -la dist/ || echo "dist/ is empty"
            exit 1
          fi

          # Check build size (optional - adjust threshold as needed)
          DIST_SIZE=$(du -sh dist/ | cut -f1)
          echo "✅ Build successful - Output size: $DIST_SIZE"
          echo "Build artifacts:"
          find dist/ -type f -name "*.js" -o -name "*.css" -o -name "*.html" | head -10

      # ─────────────────────────────────────────────
      - name: 📝 Generate job summary
        if: always()
        run: |
          echo "## 🧪 Quality Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Runtime:** Bun $(bun --version)" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** $NODE_ENV" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "coverage/lcov-report/index.html" ]; then
            echo "- **Coverage Report:** Generated ✅" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -d "dist" ]; then
            DIST_SIZE=$(du -sh dist/ 2>/dev/null | cut -f1 || echo "Unknown")
            echo "- **Build Size:** $DIST_SIZE" >> $GITHUB_STEP_SUMMARY
          fi

          # Show package manager used
          if [ -f "bun.lock" ] || [ -f "bun.lockb" ]; then
            echo "- **Package Manager:** Bun (native lockfile) ⚡" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Package Manager:** Bun (migrated from npm/yarn) ⚡" >> $GITHUB_STEP_SUMMARY
          fi
